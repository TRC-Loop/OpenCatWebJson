{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenCatWebJson","text":"<p>Docs WIP</p>"},{"location":"reference/classes/","title":"Classes","text":""},{"location":"reference/classes/#opencatwebjson.classes.HexColor","title":"HexColor","text":"<pre><code>HexColor(hex_code)\n</code></pre> <p>Represents a hexadecimal color code.</p> <p>Initialize a HexColor.</p> <p>Parameters:</p> Name Type Description Default <code>hex_code</code> <code>str</code> <p>Hex color string, e.g., \"#FFF\" or \"#FFFFFF\".</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If hex_code is not valid.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def __init__(self, hex_code: str):\n    \"\"\"\n    Initialize a HexColor.\n\n    Args:\n        hex_code (str): Hex color string, e.g., \"#FFF\" or \"#FFFFFF\".\n\n    Raises:\n        ValueError: If hex_code is not valid.\n    \"\"\"\n    if not (hex_code.startswith(\"#\") and len(hex_code) in (4, 7)):\n        raise ValueError(\"Invalid hex color\")\n    self.hex = hex_code.upper()\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Range01","title":"Range01","text":"<pre><code>Range01(value)\n</code></pre> <p>Represents a float value restricted to the range [0, 1].</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def __init__(self, value: float):\n    if not 0 &lt;= value &lt;= 1:\n        raise ValueError(\"Value must be between 0 and 1\")\n    self.value = value\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.ScaleOffset","title":"ScaleOffset","text":"<pre><code>ScaleOffset(scale, offset)\n</code></pre> <p>Represents a scale (0-1) with an offset for positioning or sizing.</p> <p>Parameters:</p> Name Type Description Default <code>scale</code> <code>Number</code> <p>Scale factor (0 to 1).</p> required <code>offset</code> <code>Number</code> <p>Pixel offset.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If scale is not between 0 and 1.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def __init__(self, scale: Number, offset: Number):\n    \"\"\"\n    Args:\n        scale (Number): Scale factor (0 to 1).\n        offset (Number): Pixel offset.\n\n    Raises:\n        ValueError: If scale is not between 0 and 1.\n    \"\"\"\n    if not 0 &lt;= scale &lt;= 1:\n        raise ValueError(\"Scale must be between 0 and 1\")\n    self.scale = scale\n    self.offset = offset\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Vector2","title":"Vector2","text":"<pre><code>Vector2(x, y)\n</code></pre> <p>Represents a 2D vector using scale + offset for x and y axes.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def __init__(self, x: ScaleOffset, y: ScaleOffset):\n    self.x = x\n    self.y = y\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Vector2.to_pixels","title":"to_pixels","text":"<pre><code>to_pixels(parent_width, parent_height)\n</code></pre> <p>Convert scale+offset to absolute pixel coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>parent_width</code> <code>Number</code> <p>Width of parent container in pixels.</p> required <code>parent_height</code> <code>Number</code> <p>Height of parent container in pixels.</p> required <p>Returns:</p> Type Description <code>tuple[Number, Number]</code> <p>tuple[Number, Number]: Pixel coordinates (x, y).</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def to_pixels(self, parent_width: Number, parent_height: Number) -&gt; tuple[Number, Number]:\n    \"\"\"\n    Convert scale+offset to absolute pixel coordinates.\n\n    Args:\n        parent_width (Number): Width of parent container in pixels.\n        parent_height (Number): Height of parent container in pixels.\n\n    Returns:\n        tuple[Number, Number]: Pixel coordinates (x, y).\n    \"\"\"\n    px = self.x.scale * parent_width + self.x.offset\n    py = self.y.scale * parent_height + self.y.offset\n    return px, py\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Size2","title":"Size2","text":"<pre><code>Size2(width, height)\n</code></pre> <p>Represents a 2D size using scale + offset for width and height.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def __init__(self, width: ScaleOffset, height: ScaleOffset):\n    self.width = width\n    self.height = height\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Size2.to_pixels","title":"to_pixels","text":"<pre><code>to_pixels(parent_width, parent_height)\n</code></pre> <p>Convert scale+offset to absolute pixel size.</p> <p>Parameters:</p> Name Type Description Default <code>parent_width</code> <code>Number</code> <p>Width of parent container in pixels.</p> required <code>parent_height</code> <code>Number</code> <p>Height of parent container in pixels.</p> required <p>Returns:</p> Type Description <code>tuple[Number, Number]</code> <p>tuple[Number, Number]: Size in pixels (width, height).</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def to_pixels(self, parent_width: Number, parent_height: Number) -&gt; tuple[Number, Number]:\n    \"\"\"\n    Convert scale+offset to absolute pixel size.\n\n    Args:\n        parent_width (Number): Width of parent container in pixels.\n        parent_height (Number): Height of parent container in pixels.\n\n    Returns:\n        tuple[Number, Number]: Size in pixels (width, height).\n    \"\"\"\n    w = self.width.scale * parent_width + self.width.offset\n    h = self.height.scale * parent_height + self.height.offset\n    return w, h\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Rotation","title":"Rotation","text":"<pre><code>Rotation(degrees)\n</code></pre> <p>Represents a rotation in degrees.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def __init__(self, degrees: Number):\n    self.degrees = float(degrees)\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Rotation.set","title":"set","text":"<pre><code>set(degrees)\n</code></pre> <p>Set the rotation to a specific angle.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def set(self, degrees: Number):\n    \"\"\"Set the rotation to a specific angle.\"\"\"\n    self.degrees = float(degrees)\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Rotation.add","title":"add","text":"<pre><code>add(delta)\n</code></pre> <p>Add delta degrees to the current rotation.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def add(self, delta: Number):\n    \"\"\"Add delta degrees to the current rotation.\"\"\"\n    self.degrees += delta\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Rotation.normalized_360","title":"normalized_360","text":"<pre><code>normalized_360()\n</code></pre> <p>Return rotation normalized to [0, 360) degrees.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def normalized_360(self) -&gt; float:\n    \"\"\"Return rotation normalized to [0, 360) degrees.\"\"\"\n    return self.degrees % 360\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Rotation.normalized_180","title":"normalized_180","text":"<pre><code>normalized_180()\n</code></pre> <p>Return rotation normalized to [-180, 180) degrees.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def normalized_180(self) -&gt; float:\n    \"\"\"Return rotation normalized to [-180, 180) degrees.\"\"\"\n    deg = self.degrees % 360\n    if deg &gt; 180:\n        deg -= 360\n    return deg\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.Rotation.to_radians","title":"to_radians","text":"<pre><code>to_radians()\n</code></pre> <p>Convert rotation to radians.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def to_radians(self) -&gt; float:\n    \"\"\"Convert rotation to radians.\"\"\"\n    return math.radians(self.degrees)\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.GradientStop","title":"GradientStop","text":"<pre><code>GradientStop(position, value)\n</code></pre> <p>Represents a stop in a gradient with a position and a value.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>float</code> <p>Position along gradient (0 to 1).</p> required <code>value</code> <p>Value at this stop (float for transparency, str for color).</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If position is not between 0 and 1.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def __init__(self, position: float, value):\n    \"\"\"\n    Args:\n        position (float): Position along gradient (0 to 1).\n        value: Value at this stop (float for transparency, str for color).\n\n    Raises:\n        ValueError: If position is not between 0 and 1.\n    \"\"\"\n    if not 0 &lt;= position &lt;= 1:\n        raise ValueError(\"Position must be between 0 and 1\")\n    self.position = position\n    self.value = value\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.TransparencyGradient","title":"TransparencyGradient","text":"<pre><code>TransparencyGradient(stops)\n</code></pre> <p>Represents a gradient of transparency values (0-1).</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def __init__(self, stops: List[GradientStop]):\n    for stop in stops:\n        if not isinstance(stop.value, (float, int)):\n            raise TypeError(\"TransparencyGradient values must be float or int\")\n    self.stops = sorted(stops, key=lambda s: s.position)\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.TransparencyGradient.get_value_at","title":"get_value_at","text":"<pre><code>get_value_at(position)\n</code></pre> <p>Get interpolated transparency at a given position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>float</code> <p>Position along gradient (0 to 1).</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Interpolated transparency value.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def get_value_at(self, position: float) -&gt; float:\n    \"\"\"\n    Get interpolated transparency at a given position.\n\n    Args:\n        position (float): Position along gradient (0 to 1).\n\n    Returns:\n        float: Interpolated transparency value.\n    \"\"\"\n    if not 0 &lt;= position &lt;= 1:\n        raise ValueError(\"Position must be between 0 and 1\")\n    if position &lt;= self.stops[0].position:\n        return self.stops[0].value\n    if position &gt;= self.stops[-1].position:\n        return self.stops[-1].value\n    for i in range(len(self.stops)-1):\n        s0, s1 = self.stops[i], self.stops[i+1]\n        if s0.position &lt;= position &lt;= s1.position:\n            t = (position - s0.position) / (s1.position - s0.position)\n            return s0.value + t * (s1.value - s0.value)\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.ColorGradient","title":"ColorGradient","text":"<pre><code>ColorGradient(stops)\n</code></pre> <p>Represents a gradient of color values (hex strings).</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def __init__(self, stops: List[GradientStop]):\n    for stop in stops:\n        if not isinstance(stop.value, str):\n            raise TypeError(\"ColorGradient values must be hex strings\")\n    self.stops = sorted(stops, key=lambda s: s.position)\n</code></pre>"},{"location":"reference/classes/#opencatwebjson.classes.ColorGradient.get_value_at","title":"get_value_at","text":"<pre><code>get_value_at(position)\n</code></pre> <p>Get color at a given position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>float</code> <p>Position along gradient (0 to 1).</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Hex color at the given position.</p> Source code in <code>opencatwebjson/classes.py</code> <pre><code>def get_value_at(self, position: float) -&gt; str:\n    \"\"\"\n    Get color at a given position.\n\n    Args:\n        position (float): Position along gradient (0 to 1).\n\n    Returns:\n        str: Hex color at the given position.\n    \"\"\"\n    if not 0 &lt;= position &lt;= 1:\n        raise ValueError(\"Position must be between 0 and 1\")\n    for stop in reversed(self.stops):\n        if position &gt;= stop.position:\n            return stop.value\n    return self.stops[0].value\n</code></pre>"},{"location":"reference/elements/","title":"Elements","text":""},{"location":"reference/elements/#opencatwebjson.elements","title":"opencatwebjson.elements","text":""},{"location":"reference/elements/#opencatwebjson.elements.Page","title":"Page  <code>dataclass</code>","text":"<pre><code>Page(\n    background_color,\n    page_title,\n    icon,\n    search_description,\n    thumbnail,\n)\n</code></pre> <p>Represents a page in the application with visual and metadata properties.</p> <p>Attributes:</p> Name Type Description <code>background_color</code> <code>HexColor</code> <p>Page background color.</p> <code>page_title</code> <code>str</code> <p>Title of the page.</p> <code>icon</code> <code>int</code> <p>ID of the page icon decal.</p> <code>search_description</code> <code>str</code> <p>Description for search functionality.</p> <code>thumbnail</code> <code>int</code> <p>ID of the page thumbnail decal.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Frame","title":"Frame  <code>dataclass</code>","text":"<pre><code>Frame(\n    name,\n    background_transparency,\n    background_color,\n    position,\n    size,\n    rotation,\n    anchor_point,\n    layer,\n    tooltip,\n    clip_descendants,\n    visible,\n)\n</code></pre> <p>A container UI element for grouping and positioning child elements.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Frame identifier.</p> <code>background_transparency</code> <code>Range01</code> <p>Background transparency (0-1).</p> <code>background_color</code> <code>HexColor</code> <p>Background color of the frame.</p> <code>position</code> <code>Vector2</code> <p>Position of the frame.</p> <code>size</code> <code>Size2</code> <p>Width and height of the frame.</p> <code>rotation</code> <code>Rotation</code> <p>Rotation applied to the frame.</p> <code>anchor_point</code> <code>Vec2</code> <p>Anchor point for positioning.</p> <code>layer</code> <code>int</code> <p>Rendering order index.</p> <code>tooltip</code> <code>str</code> <p>Tooltip text displayed on hover.</p> <code>clip_descendants</code> <code>bool</code> <p>If True, child elements outside bounds are clipped.</p> <code>visible</code> <code>bool</code> <p>Determines visibility of the frame.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Text","title":"Text  <code>dataclass</code>","text":"<pre><code>Text(\n    name,\n    text,\n    font,\n    font_style,\n    font_weight,\n    horizontal_alignment,\n    vertical_alignment,\n    text_size,\n    text_color,\n    text_transparency,\n    rich,\n    wrap,\n    truncate,\n    background_transparency,\n    background_color,\n    position,\n    size,\n    rotation,\n    anchor_point,\n    layer,\n    tooltip,\n    clip_descendants,\n    visible,\n)\n</code></pre> <p>Represents a text UI element with styling and layout properties.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>text</code> <code>str</code> <p>Displayed text.</p> <code>font</code> <code>str</code> <p>Font name.</p> <code>font_style</code> <code>FontStyle</code> <p>Font style (e.g., italic).</p> <code>font_weight</code> <code>FontWeight</code> <p>Font weight (e.g., bold).</p> <code>horizontal_alignment</code> <code>HorizontalAlignment</code> <p>Horizontal text alignment.</p> <code>vertical_alignment</code> <code>VerticalAlignment</code> <p>Vertical text alignment.</p> <code>text_size</code> <code>TextSize</code> <p>Text size.</p> <code>text_color</code> <code>HexColor</code> <p>Text color.</p> <code>text_transparency</code> <code>Range01</code> <p>Text transparency (0-1).</p> <code>rich</code> <code>bool</code> <p>Enables rich text formatting.</p> <code>wrap</code> <code>bool</code> <p>Text wraps inside bounds.</p> <code>truncate</code> <code>Truncate</code> <p>Truncation mode for overflowing text.</p> <code>background_transparency</code> <code>Range01</code> <p>Background transparency.</p> <code>background_color</code> <code>HexColor</code> <p>Background color.</p> <code>position</code> <code>Vector2</code> <p>Position of the text element.</p> <code>size</code> <code>Size2</code> <p>Width and height.</p> <code>rotation</code> <code>Rotation</code> <p>Rotation applied to text.</p> <code>anchor_point</code> <code>Vec2</code> <p>Anchor point for positioning.</p> <code>layer</code> <code>int</code> <p>Rendering layer index.</p> <code>tooltip</code> <code>str</code> <p>Tooltip text on hover.</p> <code>clip_descendants</code> <code>bool</code> <p>Clips children if True.</p> <code>visible</code> <code>bool</code> <p>Visibility of the element.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Image","title":"Image  <code>dataclass</code>","text":"<pre><code>Image(\n    name,\n    image_id,\n    image_transparency,\n    scale_type,\n    tint,\n    resample_mode,\n    background_transparency,\n    background_color,\n    position,\n    size,\n    rotation,\n    anchor_point,\n    layer,\n    tooltip,\n    clip_descendants,\n    visible,\n)\n</code></pre> <p>Represents an image element in the UI.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>image_id</code> <code>int</code> <p>ID of the decal image.</p> <code>image_transparency</code> <code>Range01</code> <p>Image transparency.</p> <code>scale_type</code> <code>ScaleType</code> <p>Scaling mode of the image.</p> <code>tint</code> <code>HexColor</code> <p>Tint applied to the image.</p> <code>resample_mode</code> <code>ResampleMode</code> <p>Image resampling mode.</p> <code>background_transparency</code> <code>Range01</code> <p>Background transparency.</p> <code>background_color</code> <code>HexColor</code> <p>Background color.</p> <code>position</code> <code>Vector2</code> <p>Position of the image element.</p> <code>size</code> <code>Size2</code> <p>Width and height.</p> <code>rotation</code> <code>Rotation</code> <p>Rotation applied.</p> <code>anchor_point</code> <code>Vec2</code> <p>Anchor point for positioning.</p> <code>layer</code> <code>int</code> <p>Rendering order index.</p> <code>tooltip</code> <code>str</code> <p>Tooltip text.</p> <code>clip_descendants</code> <code>bool</code> <p>Clips children if True.</p> <code>visible</code> <code>bool</code> <p>Visibility.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Link","title":"Link  <code>dataclass</code>","text":"<pre><code>Link(\n    name,\n    reference,\n    open_in_new_tab,\n    text,\n    font,\n    font_style,\n    font_weight,\n    horizontal_alignment,\n    vertical_alignment,\n    text_size,\n    text_color,\n    text_transparency,\n    automatic_color,\n    rich,\n    wrap,\n    truncate,\n    background_transparency,\n    background_color,\n    position,\n    size,\n    rotation,\n    anchor_point,\n    layer,\n    tooltip,\n    clip_descendants,\n    visible,\n)\n</code></pre> <p>Clickable hyperlink UI element with text styling.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>reference</code> <code>str</code> <p>URL or internal reference target.</p> <code>open_in_new_tab</code> <code>bool</code> <p>Opens link in a new tab if True.</p> <code>text</code> <code>str</code> <p>Displayed text.</p> <code>font</code> <code>str</code> <p>Font name.</p> <code>font_style</code> <code>FontStyle</code> <p>Font style.</p> <code>font_weight</code> <code>FontWeight</code> <p>Font weight.</p> <code>horizontal_alignment</code> <code>HorizontalAlignment</code> <p>Horizontal text alignment.</p> <code>vertical_alignment</code> <code>VerticalAlignment</code> <p>Vertical text alignment.</p> <code>text_size</code> <code>TextSize</code> <p>Text size.</p> <code>text_color</code> <code>HexColor</code> <p>Text color.</p> <code>text_transparency</code> <code>Range01</code> <p>Text transparency.</p> <code>automatic_color</code> <code>bool</code> <p>Automatically adjust color based on theme.</p> <code>rich</code> <code>bool</code> <p>Enables rich text.</p> <code>wrap</code> <code>bool</code> <p>Enables text wrapping.</p> <code>truncate</code> <code>Truncate</code> <p>Text truncation method.</p> <code>background_transparency</code> <code>Range01</code> <p>Background transparency.</p> <code>background_color</code> <code>HexColor</code> <p>Background color.</p> <code>position</code> <code>Vector2</code> <p>Position.</p> <code>size</code> <code>Size2</code> <p>Width and height.</p> <code>rotation</code> <code>Rotation</code> <p>Rotation applied.</p> <code>anchor_point</code> <code>Vec2</code> <p>Anchor point.</p> <code>layer</code> <code>int</code> <p>Rendering order.</p> <code>tooltip</code> <code>str</code> <p>Tooltip text.</p> <code>clip_descendants</code> <code>bool</code> <p>Clips children if True.</p> <code>visible</code> <code>bool</code> <p>Visibility.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Button","title":"Button  <code>dataclass</code>","text":"<pre><code>Button(\n    name,\n    text,\n    font,\n    font_style,\n    font_weight,\n    horizontal_alignment,\n    vertical_alignment,\n    text_size,\n    text_color,\n    text_transparency,\n    automatic_color,\n    rich,\n    wrap,\n    truncate,\n    background_transparency,\n    background_color,\n    position,\n    size,\n    rotation,\n    anchor_point,\n    layer,\n    tooltip,\n    clip_descendants,\n    visible,\n)\n</code></pre> <p>Clickable button element with text and styling properties.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>text</code> <code>str</code> <p>Displayed text.</p> <code>font</code> <code>str</code> <p>Font name.</p> <code>font_style</code> <code>FontStyle</code> <p>Font style.</p> <code>font_weight</code> <code>FontWeight</code> <p>Font weight.</p> <code>horizontal_alignment</code> <code>HorizontalAlignment</code> <p>Text horizontal alignment.</p> <code>vertical_alignment</code> <code>VerticalAlignment</code> <p>Text vertical alignment.</p> <code>text_size</code> <code>TextSize</code> <p>Text size.</p> <code>text_color</code> <code>HexColor</code> <p>Text color.</p> <code>text_transparency</code> <code>Range01</code> <p>Text transparency.</p> <code>automatic_color</code> <code>bool</code> <p>Adjust color automatically.</p> <code>rich</code> <code>bool</code> <p>Rich text enabled.</p> <code>wrap</code> <code>bool</code> <p>Wrap text inside element.</p> <code>truncate</code> <code>Truncate</code> <p>Truncation method.</p> <code>background_transparency</code> <code>Range01</code> <p>Background transparency.</p> <code>background_color</code> <code>HexColor</code> <p>Background color.</p> <code>position</code> <code>Vector2</code> <p>Position.</p> <code>size</code> <code>Size2</code> <p>Width and height.</p> <code>rotation</code> <code>Rotation</code> <p>Rotation applied.</p> <code>anchor_point</code> <code>Vec2</code> <p>Anchor point.</p> <code>layer</code> <code>int</code> <p>Rendering layer.</p> <code>tooltip</code> <code>str</code> <p>Tooltip text.</p> <code>clip_descendants</code> <code>bool</code> <p>Clip children.</p> <code>visible</code> <code>bool</code> <p>Visibility.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Donation","title":"Donation  <code>dataclass</code>","text":"<pre><code>Donation(\n    name,\n    item_id,\n    reference,\n    product_type,\n    text,\n    font,\n    font_style,\n    font_weight,\n    horizontal_alignment,\n    vertical_alignment,\n    text_size,\n    text_color,\n    text_transparency,\n    automatic_color,\n    rich,\n    wrap,\n    truncate,\n    background_transparency,\n    background_color,\n    position,\n    size,\n    rotation,\n    anchor_point,\n    layer,\n    tooltip,\n    clip_descendants,\n    visible,\n)\n</code></pre> <p>Represents a purchasable donation item element.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>item_id</code> <code>int</code> <p>ID of the item.</p> <code>reference</code> <code>str</code> <p>Reference URL or product link.</p> <code>product_type</code> <code>ProductType</code> <p>Type of product.</p> <code>text</code> <code>str</code> <p>Displayed text.</p> <code>font</code> <code>str</code> <p>Font name.</p> <code>font_style</code> <code>FontStyle</code> <p>Font style.</p> <code>font_weight</code> <code>FontWeight</code> <p>Font weight.</p> <code>horizontal_alignment</code> <code>HorizontalAlignment</code> <p>Text alignment horizontal.</p> <code>vertical_alignment</code> <code>VerticalAlignment</code> <p>Text alignment vertical.</p> <code>text_size</code> <code>TextSize</code> <p>Text size.</p> <code>text_color</code> <code>HexColor</code> <p>Text color.</p> <code>text_transparency</code> <code>Range01</code> <p>Text transparency.</p> <code>automatic_color</code> <code>bool</code> <p>Auto color adjustment.</p> <code>rich</code> <code>bool</code> <p>Enable rich text.</p> <code>wrap</code> <code>bool</code> <p>Wrap text.</p> <code>truncate</code> <code>Truncate</code> <p>Truncate method.</p> <code>background_transparency</code> <code>Range01</code> <p>Background transparency.</p> <code>background_color</code> <code>HexColor</code> <p>Background color.</p> <code>position</code> <code>Vector2</code> <p>Position.</p> <code>size</code> <code>Size2</code> <p>Width and height.</p> <code>rotation</code> <code>Rotation</code> <p>Rotation applied.</p> <code>anchor_point</code> <code>Vec2</code> <p>Anchor point.</p> <code>layer</code> <code>int</code> <p>Rendering order.</p> <code>tooltip</code> <code>str</code> <p>Tooltip text.</p> <code>clip_descendants</code> <code>bool</code> <p>Clip children if True.</p> <code>visible</code> <code>bool</code> <p>Visibility.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Input","title":"Input  <code>dataclass</code>","text":"<pre><code>Input(\n    name,\n    placeholder,\n    text,\n    font,\n    font_style,\n    font_weight,\n    horizontal_alignment,\n    vertical_alignment,\n    text_size,\n    text_color,\n    text_transparency,\n    placeholder_color,\n    automatic_color,\n    rich,\n    wrap,\n    truncate,\n    editable,\n    multi_line,\n    background_transparency,\n    background_color,\n    position,\n    size,\n    rotation,\n    anchor_point,\n    layer,\n    tooltip,\n    clip_descendants,\n    visible,\n)\n</code></pre> <p>Input text element for user input.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>placeholder</code> <code>str</code> <p>Placeholder text.</p> <code>text</code> <code>str</code> <p>Current input text.</p> <code>font</code> <code>str</code> <p>Font name.</p> <code>font_style</code> <code>FontStyle</code> <p>Font style.</p> <code>font_weight</code> <code>FontWeight</code> <p>Font weight.</p> <code>horizontal_alignment</code> <code>HorizontalAlignment</code> <p>Text horizontal alignment.</p> <code>vertical_alignment</code> <code>VerticalAlignment</code> <p>Text vertical alignment.</p> <code>text_size</code> <code>TextSize</code> <p>Text size.</p> <code>text_color</code> <code>HexColor</code> <p>Text color.</p> <code>text_transparency</code> <code>Range01</code> <p>Text transparency.</p> <code>placeholder_color</code> <code>HexColor</code> <p>Placeholder text color.</p> <code>automatic_color</code> <code>bool</code> <p>Auto color adjustment.</p> <code>rich</code> <code>bool</code> <p>Rich text enabled.</p> <code>wrap</code> <code>bool</code> <p>Wrap text inside bounds.</p> <code>truncate</code> <code>Truncate</code> <p>Truncate method.</p> <code>editable</code> <code>bool</code> <p>If True, text is editable.</p> <code>multi_line</code> <code>bool</code> <p>Multi-line input.</p> <code>background_transparency</code> <code>Range01</code> <p>Background transparency.</p> <code>background_color</code> <code>HexColor</code> <p>Background color.</p> <code>position</code> <code>Vector2</code> <p>Position.</p> <code>size</code> <code>Size2</code> <p>Width and height.</p> <code>rotation</code> <code>Rotation</code> <p>Rotation applied.</p> <code>anchor_point</code> <code>Vec2</code> <p>Anchor point.</p> <code>layer</code> <code>int</code> <p>Rendering layer.</p> <code>tooltip</code> <code>str</code> <p>Tooltip text.</p> <code>clip_descendants</code> <code>bool</code> <p>Clip children if True.</p> <code>visible</code> <code>bool</code> <p>Visibility.</p>"},{"location":"reference/elements/#opencatwebjson.elements.ScrollableFrame","title":"ScrollableFrame  <code>dataclass</code>","text":"<pre><code>ScrollableFrame(\n    name,\n    scrollbar_color,\n    scrollbar_transparency,\n    scrollbar_thickness,\n    canvas_size,\n    background_transparency,\n    background_color,\n    position,\n    size,\n    rotation,\n    anchor_point,\n    layer,\n    tooltip,\n    clip_descendants,\n    visible,\n)\n</code></pre> <p>Frame element with a scrollable canvas.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>scrollbar_color</code> <code>HexColor</code> <p>Scrollbar color.</p> <code>scrollbar_transparency</code> <code>Range01</code> <p>Scrollbar transparency.</p> <code>scrollbar_thickness</code> <code>int</code> <p>Scrollbar thickness.</p> <code>canvas_size</code> <code>CanvasSize</code> <p>Scrollable canvas size.</p> <code>background_transparency</code> <code>Range01</code> <p>Background transparency.</p> <code>background_color</code> <code>HexColor</code> <p>Background color.</p> <code>position</code> <code>Vector2</code> <p>Position.</p> <code>size</code> <code>Size2</code> <p>Width and height.</p> <code>rotation</code> <code>Rotation</code> <p>Rotation applied.</p> <code>anchor_point</code> <code>Vec2</code> <p>Anchor point.</p> <code>layer</code> <code>int</code> <p>Rendering layer.</p> <code>tooltip</code> <code>str</code> <p>Tooltip text.</p> <code>clip_descendants</code> <code>bool</code> <p>Clip children if True.</p> <code>visible</code> <code>bool</code> <p>Visibility.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Script","title":"Script  <code>dataclass</code>","text":"<pre><code>Script(name, enabled, _content)\n</code></pre> <p>Script element representing executable code.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Script identifier.</p> <code>enabled</code> <code>bool</code> <p>If True, the script is active.</p> <code>_content</code> <code>Any</code> <p>Script content placeholder (implementation TBD).</p>"},{"location":"reference/elements/#opencatwebjson.elements.Outline","title":"Outline  <code>dataclass</code>","text":"<pre><code>Outline(\n    name,\n    mode,\n    type,\n    outline_color,\n    outline_thickness,\n    outline_transparency,\n)\n</code></pre> <p>Styling outline applied to UI elements.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Outline identifier.</p> <code>mode</code> <code>OutlineMode</code> <p>Outline mode.</p> <code>type</code> <code>OutlineType</code> <p>Outline type.</p> <code>outline_color</code> <code>HexColor</code> <p>Outline color.</p> <code>outline_thickness</code> <code>int</code> <p>Outline thickness.</p> <code>outline_transparency</code> <code>Range01</code> <p>Outline transparency.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Corner","title":"Corner  <code>dataclass</code>","text":"<pre><code>Corner(name, radius)\n</code></pre> <p>Rounded corner styling for UI elements.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Corner identifier.</p> <code>radius</code> <code>Tuple2</code> <p>Corner radius.</p>"},{"location":"reference/elements/#opencatwebjson.elements.List","title":"List  <code>dataclass</code>","text":"<pre><code>List(\n    name,\n    direction,\n    padding,\n    vertical_alignment,\n    horizontal_alignment,\n    wrap,\n)\n</code></pre> <p>A list container layout element.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>direction</code> <code>ListDirection</code> <p>List direction (vertical/horizontal).</p> <code>padding</code> <code>Tuple2</code> <p>Padding between items.</p> <code>vertical_alignment</code> <code>VerticalAlignment</code> <p>Vertical alignment of list items.</p> <code>horizontal_alignment</code> <code>HorizontalAlignment</code> <p>Horizontal alignment.</p> <code>wrap</code> <code>bool</code> <p>If True, items wrap within container.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Grid","title":"Grid  <code>dataclass</code>","text":"<pre><code>Grid(\n    name,\n    padding,\n    size,\n    vertical_alignment,\n    horizontal_alignment,\n)\n</code></pre> <p>Grid container layout element.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>padding</code> <code>Tuple2</code> <p>Padding between grid cells.</p> <code>size</code> <code>Size2</code> <p>Cell size.</p> <code>vertical_alignment</code> <code>VerticalAlignment</code> <p>Vertical alignment.</p> <code>horizontal_alignment</code> <code>HorizontalAlignment</code> <p>Horizontal alignment.</p>"},{"location":"reference/elements/#opencatwebjson.elements.AspectRatio","title":"AspectRatio  <code>dataclass</code>","text":"<pre><code>AspectRatio(name, ratio)\n</code></pre> <p>Maintains a fixed aspect ratio for an element.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>ratio</code> <code>int</code> <p>Width-to-height ratio.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Constraint","title":"Constraint  <code>dataclass</code>","text":"<pre><code>Constraint(name, minimum_size, maximum_size)\n</code></pre> <p>Size constraints for UI elements.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>minimum_size</code> <code>Tuple2</code> <p>Minimum width and height.</p> <code>maximum_size</code> <code>MaxSize</code> <p>Maximum allowed size.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Gradient","title":"Gradient  <code>dataclass</code>","text":"<pre><code>Gradient(\n    name,\n    rotation,\n    offset,\n    gradient_transparency,\n    gradient_color,\n)\n</code></pre> <p>Gradient styling element.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>rotation</code> <code>Rotation</code> <p>Gradient rotation.</p> <code>offset</code> <code>Tuple2</code> <p>Gradient offset.</p> <code>gradient_transparency</code> <code>TransparencyGradient</code> <p>Transparency gradient.</p> <code>gradient_color</code> <code>ColorGradient</code> <p>Color gradient.</p>"},{"location":"reference/elements/#opencatwebjson.elements.Padding","title":"Padding  <code>dataclass</code>","text":"<pre><code>Padding(name, bottom, left, right, top)\n</code></pre> <p>Padding applied to a UI element.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Element identifier.</p> <code>bottom</code> <code>Tuple2</code> <p>Bottom padding.</p> <code>left</code> <code>Tuple2</code> <p>Left padding.</p> <code>right</code> <code>Tuple2</code> <p>Right padding.</p> <code>top</code> <code>Tuple2</code> <p>Top padding.</p>"},{"location":"reference/literals/","title":"Literals","text":""},{"location":"reference/literals/#opencatwebjson.literals.Tuple2","title":"Tuple2  <code>module-attribute</code>","text":"<pre><code>Tuple2 = tuple[Number, Number]\n</code></pre> <p>A 2-element tuple of numbers, typically used for size or position.</p>"},{"location":"reference/literals/#opencatwebjson.literals.FontStyle","title":"FontStyle  <code>module-attribute</code>","text":"<pre><code>FontStyle = Literal['normal', 'italic']\n</code></pre> <p>Font style options for text elements.</p>"},{"location":"reference/literals/#opencatwebjson.literals.FontWeight","title":"FontWeight  <code>module-attribute</code>","text":"<pre><code>FontWeight = Literal[\n    \"thin\",\n    \"extralight\",\n    \"light\",\n    \"regular\",\n    \"medium\",\n    \"semibold\",\n    \"bold\",\n    \"extrabold\",\n    \"heavy\",\n]\n</code></pre> <p>Font weight options for text elements.</p>"},{"location":"reference/literals/#opencatwebjson.literals.HorizontalAlignment","title":"HorizontalAlignment  <code>module-attribute</code>","text":"<pre><code>HorizontalAlignment = Literal['center', 'left', 'right']\n</code></pre> <p>Horizontal alignment options for text or UI elements.</p>"},{"location":"reference/literals/#opencatwebjson.literals.VerticalAlignment","title":"VerticalAlignment  <code>module-attribute</code>","text":"<pre><code>VerticalAlignment = Literal['bottom', 'center', 'top']\n</code></pre> <p>Vertical alignment options for text or UI elements.</p>"},{"location":"reference/literals/#opencatwebjson.literals.Truncate","title":"Truncate  <code>module-attribute</code>","text":"<pre><code>Truncate = Literal['atend', 'none', 'splitword']\n</code></pre> <p>Text truncation behavior when content overflows.</p>"},{"location":"reference/literals/#opencatwebjson.literals.ScaleType","title":"ScaleType  <code>module-attribute</code>","text":"<pre><code>ScaleType = Literal[\n    \"crop\", \"fit\", \"slice\", \"stretch\", \"tile\"\n]\n</code></pre> <p>How images or UI elements scale within a container.</p>"},{"location":"reference/literals/#opencatwebjson.literals.ResampleMode","title":"ResampleMode  <code>module-attribute</code>","text":"<pre><code>ResampleMode = Literal['default', 'pixelated']\n</code></pre> <p>Resampling mode for image scaling.</p>"},{"location":"reference/literals/#opencatwebjson.literals.ProductType","title":"ProductType  <code>module-attribute</code>","text":"<pre><code>ProductType = Literal['asset', 'gamepass', 'product']\n</code></pre> <p>Type of product or item being referenced.</p>"},{"location":"reference/literals/#opencatwebjson.literals.OutlineMode","title":"OutlineMode  <code>module-attribute</code>","text":"<pre><code>OutlineMode = Literal['border', 'contextual']\n</code></pre> <p>Outline rendering mode for text. Contextual only works when rich markup is disabled.</p>"},{"location":"reference/literals/#opencatwebjson.literals.OutlineType","title":"OutlineType  <code>module-attribute</code>","text":"<pre><code>OutlineType = Literal['bevel', 'miter', 'round']\n</code></pre> <p>Type of outline geometry for text elements.</p>"},{"location":"reference/literals/#opencatwebjson.literals.ListDirection","title":"ListDirection  <code>module-attribute</code>","text":"<pre><code>ListDirection = Literal['horizontal', 'vertical']\n</code></pre> <p>Direction for list layouts or container stacking.</p>"},{"location":"reference/literals/#opencatwebjson.literals.TextSize","title":"TextSize  <code>module-attribute</code>","text":"<pre><code>TextSize = Union[int, float, Literal['scaled']]\n</code></pre> <p>Font size, which can be a number in pixels or 'scaled' for dynamic sizing.</p>"},{"location":"reference/literals/#opencatwebjson.literals.CanvasSize","title":"CanvasSize  <code>module-attribute</code>","text":"<pre><code>CanvasSize = Union[\n    Size2, Literal[\"auto\", \"auto_x\", \"auto_y\"]\n]\n</code></pre> <p>Canvas size, either an absolute Size2 or automatic sizing options.</p>"},{"location":"reference/literals/#opencatwebjson.literals.MaxSize","title":"MaxSize  <code>module-attribute</code>","text":"<pre><code>MaxSize = Union[Tuple2, Literal['inf']]\n</code></pre> <p>Maximum size constraint, either a tuple of numbers or 'inf' for unlimited.</p>"},{"location":"reference/literals/#opencatwebjson.literals.Vec2","title":"Vec2","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Represents a 2D vector with x and y coordinates.</p>"}]}